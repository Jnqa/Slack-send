name: 'Upload to S3'
description: ''
inputs:
  MESSAGE_TEXT:
    description: 'Comment'
    required: true
    default: 'None'
  SLACK_TOKEN:
    description: 'SLACK TOKEN'
    required: true
    default: 'no token'
  CHANNELS:
    description: 'Slack channels ID where message will be posted (separated with ,)'
    required: true
    default: '' 
  FILENAME:
    description: 'Attachment'
    required: false
    default: ''
  TIMEOUT:
    description: 'for large files'
    required: false
    default: '74'
  ERROR_TEXT:
    description: 'Message, if file was not uploaded'
    required: false
    default: '⚠ Ошибка прикрепления файла'
  UPLOADIND_TEXT:
    description: 'Message, if file was not uploaded'
    required: false
    default: ':hourglass_flowing_sand: Прикрепление файла...'


runs:
  using: "composite"
  steps: 
    - name: Send via curl
      shell: bash
      run: |
        response=$(curl -F text="${{ inputs.MESSAGE_TEXT }} ${{ inputs.UPLOADIND_TEXT }}" \
                        -F channel=${{ inputs.CHANNELS }} \
                        -H "Authorization: Bearer ${{ inputs.SLACK_TOKEN }}" \
                        https://slack.com/api/chat.postMessage)
        echo $response | jq -r
        TS=$(echo $response | jq -r ".ts")
        echo "TS=$TS" >> $GITHUB_ENV
        echo TS is $TS
        response=$(curl -d attachments="[{\"pretext\": \"pre-hello\", \"text\": \"text-world\"}]" \
                        -d channel=${{ inputs.CHANNELS }} \
                        -H "Authorization: Bearer ${{ inputs.SLACK_TOKEN }}" \
                        https://slack.com/api/chat.postMessage)
        echo $response | jq -r
        TS2=$(echo $response | jq -r ".ts")
        CHANNEL=$(echo $response | jq -r ".channel") && echo "CHANNEL=$CHANNEL" >> $GITHUB_ENV || echo "nope"
        echo "TS2=$TS2" >> $GITHUB_ENV
        echo TS2 is $TS2

#         response=$(curl -d blocks="[{\"type\": \"section\", \"text\": {\"type\": \"plain_text\", \"text\": \"Editable? ${{ inputs.ERROR_TEXT }}\"}}]" \
     #
    - name: Attach file
      shell: bash
      run: |
        response=$(curl --connect-timeout ${{ inputs.TIMEOUT }} -F file=@${{ inputs.FILENAME }} \
                -F channels=${{ inputs.CHANNELS }} \
                -F thread_ts=${{ env.TS2 }} \
                -H "Authorization: Bearer ${{ inputs.SLACK_TOKEN }}" \
                https://slack.com/api/files.upload)
        echo "FILE: $response" | jq -r || echo "FILE: $response"
        STATUS=$(echo $response | jq -r ".ok") && echo "STATUS=$STATUS" >> $GITHUB_ENV || echo $response
        FILEID=$(echo $response | jq -r ".file.id") && echo "FILEID=$FILEID" >> $GITHUB_ENV || echo "nope"
        echo File_id - $FILEID
        response=$(curl -d channel="${{ env.CHANNEL }}" \
                        -d file_ids=["$FILEID"] \
                        -d "ts=${{ env.TS }}" \
                        -d "text=${{ inputs.MESSAGE_TEXT }}" \
                        -H "Authorization: Bearer ${{ inputs.SLACK_TOKEN }}" \
                        https://slack.com/api/chat.update)
        echo $response
        echo "All ok!"
        response2=$(curl -d channel="${{ env.CHANNEL }}" \
                        -d file_ids=["$FILEID"] \
                        -d "ts=${{ env.TS2 }}" \
                        -d attachments="[{\"text\": \"${{ inputs.MESSAGE_TEXT }}\"}]" \
                        -H "Authorization: Bearer ${{ inputs.SLACK_TOKEN }}" \
                        https://slack.com/api/chat.update)
        echo $response2
        echo "All ok2!"

    - name: Check status
      if: env.STATUS != 'true'
      shell: bash
      run: |
        exit 1

#    - name: Check status
#      if: env.STATUS != 'true'
#      shell: bash
#      run: |
#        response=$(curl --connect-timeout ${{ inputs.TIMEOUT }} \
#                -d text="${{ inputs.MESSAGE_TEXT }}${{ inputs.ERROR_TEXT }}" \
#                -d channel=${{ inputs.CHANNELS }} \
#                -d file_ids=${{ env.FILEID }} \
#                -H "Authorization: Bearer ${{ inputs.SLACK_TOKEN }}" \
#                https://slack.com/api/chat.postMessage)
#        echo TS=$(echo $response | jq -r ".ts") >> $GITHUB_ENV
#        echo $response | jq -r
#        echo "Emoji"
#        sleep 3
#        response=$(curl --connect-timeout ${{ inputs.TIMEOUT }} \
#                -d text=":card_file_box:" \
#                -d thread_ts=$TS \
#                -d channel=${{ inputs.CHANNELS }} \
#                -H "Authorization: Bearer ${{ inputs.SLACK_TOKEN }}" \
#                https://slack.com/api/chat.postMessage)
#        echo $response | jq -r
